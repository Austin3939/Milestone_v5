//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inscript_v5.Data.Inscriptions
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Inscriptv4Entities : DbContext
    {
        public Inscriptv4Entities()
            : base("name=Inscriptv4Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<InscriptionsGet_Result> InscriptionGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionsGet_Result>("InscriptionGetList");
        }
    
        public virtual ObjectResult<InscriptionsGet_Result> InscriptionsGet(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionsGet_Result>("InscriptionsGet", inscriptionIDParameter);
        }
    
        public virtual int DeleteInscription(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInscription", inscriptionIDParameter);
        }
    
        public virtual int InsertInscription(string inscriptionName, string date, string location, string language, string notes, ObjectParameter inscriptionID)
        {
            var inscriptionNameParameter = inscriptionName != null ?
                new ObjectParameter("InscriptionName", inscriptionName) :
                new ObjectParameter("InscriptionName", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInscription", inscriptionNameParameter, dateParameter, locationParameter, languageParameter, notesParameter, inscriptionID);
        }
    
        public virtual int UpdateInscriptions(Nullable<int> inscriptionID, string inscriptionName, string notes, string date, Nullable<int> dateID, string location, Nullable<int> locationID, string language, Nullable<int> languageID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var inscriptionNameParameter = inscriptionName != null ?
                new ObjectParameter("InscriptionName", inscriptionName) :
                new ObjectParameter("InscriptionName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateIDParameter = dateID.HasValue ?
                new ObjectParameter("DateID", dateID) :
                new ObjectParameter("DateID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInscriptions", inscriptionIDParameter, inscriptionNameParameter, notesParameter, dateParameter, dateIDParameter, locationParameter, locationIDParameter, languageParameter, languageIDParameter);
        }
    
        public virtual ObjectResult<DatesGet_Result> DatesGet(Nullable<int> dateID)
        {
            var dateIDParameter = dateID.HasValue ?
                new ObjectParameter("DateID", dateID) :
                new ObjectParameter("DateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatesGet_Result>("DatesGet", dateIDParameter);
        }
    
        public virtual ObjectResult<DatesGet_Result> DatesGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DatesGet_Result>("DatesGetList");
        }
    
        public virtual ObjectResult<LanguageGet_Result> LanguageGet(Nullable<int> languageID)
        {
            var languageIDParameter = languageID.HasValue ?
                new ObjectParameter("LanguageID", languageID) :
                new ObjectParameter("LanguageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LanguageGet_Result>("LanguageGet", languageIDParameter);
        }
    
        public virtual ObjectResult<LanguageGet_Result> LanguageGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LanguageGet_Result>("LanguageGetList");
        }
    
        public virtual ObjectResult<LocationGet_Result> LocationGet(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationGet_Result>("LocationGet", locationIDParameter);
        }
    
        public virtual ObjectResult<LocationGet_Result> LocationGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationGet_Result>("LocationGetList");
        }
    
        public virtual ObjectResult<TranslationGet_Result> TranslationGet(Nullable<int> inscriptionID, Nullable<int> translationID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGet_Result>("TranslationGet", inscriptionIDParameter, translationIDParameter);
        }
    
        public virtual ObjectResult<TranslationGet_Result> TranslationGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGet_Result>("TranslationGetList");
        }
    
        public virtual ObjectResult<ImagesGet_Result> ImagesGet(Nullable<int> imageID)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImagesGet_Result>("ImagesGet", imageIDParameter);
        }
    
        public virtual ObjectResult<ImagesGet_Result> ImagesGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImagesGet_Result>("ImagesGetList");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<InscriptionTextGet_Result> InscriptionTextGet(Nullable<int> textID)
        {
            var textIDParameter = textID.HasValue ?
                new ObjectParameter("TextID", textID) :
                new ObjectParameter("TextID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionTextGet_Result>("InscriptionTextGet", textIDParameter);
        }
    
        public virtual ObjectResult<InscriptionTextGet_Result> InscriptionTextGetList(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionTextGet_Result>("InscriptionTextGetList", inscriptionIDParameter);
        }
    
        public virtual int DeleteInscriptionText(Nullable<int> textID)
        {
            var textIDParameter = textID.HasValue ?
                new ObjectParameter("TextID", textID) :
                new ObjectParameter("TextID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInscriptionText", textIDParameter);
        }
    
        public virtual int InsertInscriptionText(Nullable<int> inscriptionID, Nullable<int> lineNumber, string text)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var lineNumberParameter = lineNumber.HasValue ?
                new ObjectParameter("LineNumber", lineNumber) :
                new ObjectParameter("LineNumber", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInscriptionText", inscriptionIDParameter, lineNumberParameter, textParameter);
        }
    
        public virtual int UpdateInscriptionText(Nullable<int> textID, Nullable<int> inscriptionID, string text, Nullable<int> lineNumber)
        {
            var textIDParameter = textID.HasValue ?
                new ObjectParameter("TextID", textID) :
                new ObjectParameter("TextID", typeof(int));
    
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var lineNumberParameter = lineNumber.HasValue ?
                new ObjectParameter("LineNumber", lineNumber) :
                new ObjectParameter("LineNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInscriptionText", textIDParameter, inscriptionIDParameter, textParameter, lineNumberParameter);
        }
    
        public virtual ObjectResult<UserGet_Result> UserGet(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGet_Result>("UserGet", userIDParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIDParameter);
        }
    
        public virtual int InsertUser(string userName, string email, string password, Nullable<int> roleID, string firstName, string lastName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", userNameParameter, emailParameter, passwordParameter, roleIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual int UpdateUser(Nullable<int> userID, string userName, string email, string password, Nullable<int> roleID, string firstName, string lastName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", userIDParameter, userNameParameter, emailParameter, passwordParameter, roleIDParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<UserGet_Result> UserGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGet_Result>("UserGetList");
        }
    
        public virtual ObjectResult<UserInscriptionsGet_Result> UserInscriptionsGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserInscriptionsGet_Result>("UserInscriptionsGetList");
        }
    
        public virtual int InsertUserInscriptions(Nullable<int> userID, Nullable<int> inscriptionID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserInscriptions", userIDParameter, inscriptionIDParameter);
        }
    
        public virtual int RemoveSavedInscription(Nullable<int> userID, Nullable<int> inscriptionID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveSavedInscription", userIDParameter, inscriptionIDParameter);
        }
    
        public virtual ObjectResult<InscriptionsGet_Result> SelectRecent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionsGet_Result>("SelectRecent");
        }
    
        public virtual int InsertTranslation(Nullable<bool> publicView, Nullable<int> inscriptionID, Nullable<int> createByUserID, string translationName, string translationText, string notes)
        {
            var publicViewParameter = publicView.HasValue ?
                new ObjectParameter("PublicView", publicView) :
                new ObjectParameter("PublicView", typeof(bool));
    
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var createByUserIDParameter = createByUserID.HasValue ?
                new ObjectParameter("CreateByUserID", createByUserID) :
                new ObjectParameter("CreateByUserID", typeof(int));
    
            var translationNameParameter = translationName != null ?
                new ObjectParameter("TranslationName", translationName) :
                new ObjectParameter("TranslationName", typeof(string));
    
            var translationTextParameter = translationText != null ?
                new ObjectParameter("TranslationText", translationText) :
                new ObjectParameter("TranslationText", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTranslation", publicViewParameter, inscriptionIDParameter, createByUserIDParameter, translationNameParameter, translationTextParameter, notesParameter);
        }
    
        public virtual int UpdateTranslation(Nullable<int> inscriptionID, Nullable<bool> publicView, string translationName, string translationText, string notes, Nullable<int> translationID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            var publicViewParameter = publicView.HasValue ?
                new ObjectParameter("PublicView", publicView) :
                new ObjectParameter("PublicView", typeof(bool));
    
            var translationNameParameter = translationName != null ?
                new ObjectParameter("TranslationName", translationName) :
                new ObjectParameter("TranslationName", typeof(string));
    
            var translationTextParameter = translationText != null ?
                new ObjectParameter("TranslationText", translationText) :
                new ObjectParameter("TranslationText", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTranslation", inscriptionIDParameter, publicViewParameter, translationNameParameter, translationTextParameter, notesParameter, translationIDParameter);
        }
    
        public virtual ObjectResult<TranslationTextGet_Result> TranslationTextGet(Nullable<int> translationTextID)
        {
            var translationTextIDParameter = translationTextID.HasValue ?
                new ObjectParameter("TranslationTextID", translationTextID) :
                new ObjectParameter("TranslationTextID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationTextGet_Result>("TranslationTextGet", translationTextIDParameter);
        }
    
        public virtual ObjectResult<TranslationTextGet_Result> TranslationTextGetList(Nullable<int> translationID)
        {
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationTextGet_Result>("TranslationTextGetList", translationIDParameter);
        }
    
        public virtual int InsertTranslationText(Nullable<int> translationID, Nullable<int> lineNumber, string translationText)
        {
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            var lineNumberParameter = lineNumber.HasValue ?
                new ObjectParameter("LineNumber", lineNumber) :
                new ObjectParameter("LineNumber", typeof(int));
    
            var translationTextParameter = translationText != null ?
                new ObjectParameter("TranslationText", translationText) :
                new ObjectParameter("TranslationText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTranslationText", translationIDParameter, lineNumberParameter, translationTextParameter);
        }
    
        public virtual int DeleteTranslation(Nullable<int> translationID)
        {
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTranslation", translationIDParameter);
        }
    
        public virtual ObjectResult<UserTranslationsGetList_Result> UserTranslationsGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserTranslationsGetList_Result>("UserTranslationsGetList");
        }
    
        public virtual ObjectResult<TranslationGetById_Result> TranslationGetById(Nullable<int> translationID)
        {
            var translationIDParameter = translationID.HasValue ?
                new ObjectParameter("TranslationID", translationID) :
                new ObjectParameter("TranslationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGetById_Result>("TranslationGetById", translationIDParameter);
        }
    
        public virtual ObjectResult<TranslationGet_Result> TranslationPublicGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGet_Result>("TranslationPublicGetList");
        }
    
        public virtual int InsertUserProject(Nullable<int> userID, string projectName)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserProject", userIDParameter, projectNameParameter);
        }
    
        public virtual ObjectResult<UserProjectsGet_Result> UserProjectsGet(Nullable<int> projectID, Nullable<int> userID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProjectsGet_Result>("UserProjectsGet", projectIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<UserProjectsGet_Result> UserProjectsGetList(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserProjectsGet_Result>("UserProjectsGetList", userIDParameter);
        }
    
        public virtual ObjectResult<UserInscriptionsGet_Result> UserInscriptionsGet(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserInscriptionsGet_Result>("UserInscriptionsGet", inscriptionIDParameter);
        }
    
        public virtual int UpdateProjectDocument(Nullable<int> projectID, Nullable<int> userID, string projectName, string projectDocument)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var projectDocumentParameter = projectDocument != null ?
                new ObjectParameter("ProjectDocument", projectDocument) :
                new ObjectParameter("ProjectDocument", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectDocument", projectIDParameter, userIDParameter, projectNameParameter, projectDocumentParameter);
        }
    
        public virtual int AddToProject(Nullable<int> projectID, Nullable<int> userInscriptionsID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var userInscriptionsIDParameter = userInscriptionsID.HasValue ?
                new ObjectParameter("UserInscriptionsID", userInscriptionsID) :
                new ObjectParameter("UserInscriptionsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToProject", projectIDParameter, userInscriptionsIDParameter);
        }
    
        public virtual ObjectResult<ProjectInscriptionsGet_Result> ProjectInscriptionsGet(Nullable<int> projectInscriptionID)
        {
            var projectInscriptionIDParameter = projectInscriptionID.HasValue ?
                new ObjectParameter("ProjectInscriptionID", projectInscriptionID) :
                new ObjectParameter("ProjectInscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectInscriptionsGet_Result>("ProjectInscriptionsGet", projectInscriptionIDParameter);
        }
    
        public virtual ObjectResult<ProjectInscriptionsGet_Result> ProjectInscriptionsGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProjectInscriptionsGet_Result>("ProjectInscriptionsGetList");
        }
    
        public virtual int RemoveProjectInscription(Nullable<int> projectInscriptionID)
        {
            var projectInscriptionIDParameter = projectInscriptionID.HasValue ?
                new ObjectParameter("ProjectInscriptionID", projectInscriptionID) :
                new ObjectParameter("ProjectInscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveProjectInscription", projectInscriptionIDParameter);
        }
    
        public virtual int UpdateProjectName(string projectName, Nullable<int> projectID)
        {
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectName", projectNameParameter, projectIDParameter);
        }
    
        public virtual int DeleteProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProject", projectIDParameter);
        }
    
        public virtual ObjectResult<string> GetRolesForUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRolesForUser", userIDParameter);
        }
    
        public virtual ObjectResult<InscriptionsGet_Result> FilterInscriptions(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InscriptionsGet_Result>("FilterInscriptions", searchTextParameter);
        }
    
        public virtual ObjectResult<TranslationGet_Result> FilterTranslation(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGet_Result>("FilterTranslation", searchTextParameter);
        }
    
        public virtual ObjectResult<UserGet_Result> FilterUsers(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGet_Result>("FilterUsers", searchTextParameter);
        }
    
        public virtual ObjectResult<SearchInscriptionsGet_Result> SearchInscriptions(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchInscriptionsGet_Result>("SearchInscriptions", searchTextParameter);
        }
    
        public virtual ObjectResult<SearchInscriptionsGet_Result> SearchInscriptionsGet(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchInscriptionsGet_Result>("SearchInscriptionsGet", inscriptionIDParameter);
        }
    
        public virtual int DeleteSiteUpdate(Nullable<int> updateID)
        {
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSiteUpdate", updateIDParameter);
        }
    
        public virtual int InsertSiteUpdate(string updateName, Nullable<System.DateTime> date, string text, Nullable<int> userID)
        {
            var updateNameParameter = updateName != null ?
                new ObjectParameter("UpdateName", updateName) :
                new ObjectParameter("UpdateName", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSiteUpdate", updateNameParameter, dateParameter, textParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SiteUpdatesGet_Result> SiteUpdatesGet(Nullable<int> updateID)
        {
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiteUpdatesGet_Result>("SiteUpdatesGet", updateIDParameter);
        }
    
        public virtual ObjectResult<SiteUpdatesGet_Result> SiteUpdatesGetList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiteUpdatesGet_Result>("SiteUpdatesGetList");
        }
    
        public virtual int UpdateSiteUpdate(Nullable<int> updateID, string updateName, Nullable<System.DateTime> date, string text, Nullable<int> userID)
        {
            var updateIDParameter = updateID.HasValue ?
                new ObjectParameter("UpdateID", updateID) :
                new ObjectParameter("UpdateID", typeof(int));
    
            var updateNameParameter = updateName != null ?
                new ObjectParameter("UpdateName", updateName) :
                new ObjectParameter("UpdateName", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSiteUpdate", updateIDParameter, updateNameParameter, dateParameter, textParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SiteUpdatesGet_Result> SelectRecentSiteUpdates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiteUpdatesGet_Result>("SelectRecentSiteUpdates");
        }
    
        public virtual ObjectResult<TranslationGet_Result> TranslationDefaultGet(Nullable<int> inscriptionID)
        {
            var inscriptionIDParameter = inscriptionID.HasValue ?
                new ObjectParameter("InscriptionID", inscriptionID) :
                new ObjectParameter("InscriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TranslationGet_Result>("TranslationDefaultGet", inscriptionIDParameter);
        }
    }
}
